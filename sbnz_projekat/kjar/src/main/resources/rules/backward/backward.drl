package backward;

import com.ftn.sbnz.model.models.*;
import java.util.List;
import java.util.ArrayList;

// ===== BACKWARD CHAINING SA STABLOM ČINJENICA =====
// Rekurzivni upiti koji grade stablo zavisnosti

// Osnovni fakt - bolest je verovatna ako je verovatnoća >= 50%
rule "BC-FACT: Bolest je verovatna"
    when
        $disease: Disease(probability >= 50.0)
        not Fact(type == "DISEASE_PROBABLE", subject == $disease.getName())
    then
        Fact fact = new Fact("DISEASE_PROBABLE", $disease.getName(), 
                            "Bolest " + $disease.getName() + " je verovatna (" + $disease.getProbability() + "%)");
        fact.addEvidence("Verovatnoća: " + $disease.getProbability() + "%");
        fact.addEvidence("Prag: >= 50%");
        
        System.out.println("BC-FACT: Kreiran fakt - " + fact.getDescription());
        insert(fact);
end

// Rekurzivni upit - da li je bolest verovatna?
rule "BC-QUERY: Da li je bolest verovatna?"
    when
        $query: DiagnosticQuery(queryType == "IS_DISEASE_PROBABLE", result == null)
        $fact: Fact(type == "DISEASE_PROBABLE", subject == $query.getDiseaseName())
    then
        $query.setResult("DA - " + $fact.getDescription());
        $query.setExplanation($fact.getEvidence());
        
        System.out.println("BC-QUERY: Rekurzivni odgovor na osnovu fakta");
        System.out.println("          Fakt: " + $fact.getDescription());
        
        update($query);
end

// Složeniji fakt - bolest je opasna ako je verovatna I ima visok rizik
rule "BC-FACT: Bolest je opasna"
    when
        $fact1: Fact(type == "DISEASE_PROBABLE", $diseaseName: subject)
        $disease: Disease(name == $diseaseName, probability >= 70.0)
        $env: EnvironmentalCondition()
        eval(isHighRiskEnvironment($disease.getName(), $env))
        not Fact(type == "DISEASE_DANGEROUS", subject == $diseaseName)
    then
        Fact dangerousFact = new Fact("DISEASE_DANGEROUS", $diseaseName, 
                                    "Bolest " + $diseaseName + " je OPASNA - visok rizik");
        dangerousFact.addEvidence("Baziran na faktu: " + $fact1.getDescription());
        dangerousFact.addEvidence("Visoka verovatnoća: " + $disease.getProbability() + "%");
        dangerousFact.addEvidence("Kritični uslovi sredine");
        
        System.out.println("BC-FACT: Kreiran složeni fakt - " + dangerousFact.getDescription());
        insert(dangerousFact);
end

// Fakt - tretman je dozvoljen
rule "BC-FACT: Tretman je dozvoljen"
    when
        $treatment: Treatment($treatmentName: name)
        $crop: Crop($phenophase: phenophase)
        not Contraindication(treatmentName == $treatmentName, phenophase == $phenophase)
        not Fact(type == "TREATMENT_ALLOWED", subject == ($treatmentName + "_" + $phenophase))
    then
        Fact fact = new Fact("TREATMENT_ALLOWED", $treatmentName + "_" + $phenophase,
                            "Tretman " + $treatmentName + " je dozvoljen u " + $phenophase);
        fact.addEvidence("Tretman postoji: " + $treatment.getName());
        fact.addEvidence("Fenofaza: " + $phenophase);
        fact.addEvidence("Nema kontraindikacija");
        
        System.out.println("BC-FACT: Kreiran fakt dozvole - " + fact.getDescription());
        insert(fact);
end

// Rekurzivni upit - da li je tretman dozvoljen?
rule "BC-QUERY: Da li je tretman dozvoljen?"
    when
        $query: DiagnosticQuery(queryType == "IS_TREATMENT_ALLOWED", result == null)
        $fact: Fact(type == "TREATMENT_ALLOWED", 
                    subject == ($query.getTreatmentName() + "_" + $query.getPhenophase()))
    then
        $query.setResult("DA - " + $fact.getDescription());
        $query.setExplanation($fact.getEvidence());
        
        System.out.println("BC-QUERY: Rekurzivni odgovor o tretmanu na osnovu fakta");
        
        update($query);
end

// Složeniji rekurzivni upit - analiza uzroka kroz stablo činjenica
rule "BC-FACT: Uzrok rizika - kritični uslovi"
    when
        $disease: Disease($diseaseName: name, probability > 0)
        $env: EnvironmentalCondition()
        eval(isRiskyCause($diseaseName, $env))
        not Fact(type == "RISK_CAUSE", subject == $diseaseName)
    then
        Fact causeFact = new Fact("RISK_CAUSE", $diseaseName, 
                                "Identifikovan uzrok rizika za " + $diseaseName);
        
        if ($diseaseName.equals("Plamenjača") && $env.getHumidity() > 85 && 
            $env.getTemperature() >= 22 && $env.getTemperature() <= 28) {
            causeFact.addEvidence("Kritični uslovi: RH=" + $env.getHumidity() + "%, T=" + $env.getTemperature() + "°C");
            causeFact.addEvidence("Optimalni uslovi za Phytophthora infestans");
        } else if ($diseaseName.equals("Pepelnica") && $env.getHumidity() >= 60 && $env.getHumidity() <= 80) {
            causeFact.addEvidence("Umerena vlažnost: RH=" + $env.getHumidity() + "%");
            causeFact.addEvidence("Pepelnica preferira umerenu vlažnost");
        }
        
        System.out.println("BC-FACT: Kreiran fakt uzroka - " + causeFact.getDescription());
        insert(causeFact);
end

// Rekurzivni upit koji koristi stablo činjenica
rule "BC-QUERY: Rekurzivna analiza uzroka"
    when
        $query: DiagnosticQuery(queryType == "WHAT_CAUSED_RISK", result == null)
        $causeFact: Fact(type == "RISK_CAUSE", subject == $query.getDiseaseName())
        $probableFact: Fact(type == "DISEASE_PROBABLE", subject == $query.getDiseaseName())
    then
        $query.setResult($causeFact.getDescription());
        
        List<String> combinedEvidence = new ArrayList<>();
        combinedEvidence.add("=== STABLO ČINJENICA ===");
        combinedEvidence.add("1. " + $probableFact.getDescription());
        combinedEvidence.addAll($probableFact.getEvidence());
        combinedEvidence.add("2. " + $causeFact.getDescription());
        combinedEvidence.addAll($causeFact.getEvidence());
        
        $query.setExplanation(combinedEvidence);
        
        System.out.println("BC-QUERY: Rekurzivna analiza kroz stablo činjenica");
        System.out.println("          Korišćeni fakti: " + $probableFact.getType() + " + " + $causeFact.getType());
        
        update($query);
end

// Fallback pravila za slučajeve kada nema dovoljno činjenica
rule "BC-QUERY: Nema dovoljno činjenica za bolest"
    when
        $query: DiagnosticQuery(queryType == "IS_DISEASE_PROBABLE", result == null)
        $disease: Disease(name == $query.getDiseaseName(), probability < 50.0)
        not Fact(type == "DISEASE_PROBABLE", subject == $query.getDiseaseName())
    then
        $query.setResult("NE - Nedovoljno činjenica za potvrdu bolesti " + $query.getDiseaseName());
        
        List<String> explanations = new ArrayList<>();
        explanations.add("Verovatnoća: " + $disease.getProbability() + "% < 50%");
        explanations.add("Potrebni dodatni simptomi ili uslovi");
        
        $query.setExplanation(explanations);
        
        System.out.println("BC-QUERY: Nedovoljno činjenica za " + $query.getDiseaseName());
        
        update($query);
end

rule "BC-QUERY: Tretman nije dozvoljen"
    when
        $query: DiagnosticQuery(queryType == "IS_TREATMENT_ALLOWED", result == null)
        $contraindication: Contraindication(
            treatmentName == $query.getTreatmentName(),
            phenophase == $query.getPhenophase()
        )
    then
        $query.setResult("NE - Tretman blokiran kontraindikacijom");
        
        List<String> explanations = new ArrayList<>();
        explanations.add("Razlog: " + $contraindication.getDescription());
        explanations.add("Tip: " + $contraindication.getType());
        
        $query.setExplanation(explanations);
        
        System.out.println("BC-QUERY: Tretman blokiran kontraindikacijom");
        
        update($query);
end

// Pomoćne funkcije za evaluaciju
function boolean isHighRiskEnvironment(String diseaseName, EnvironmentalCondition env) {
    if ("Plamenjača".equals(diseaseName)) {
        return env.getHumidity() > 85 && env.getTemperature() >= 22 && env.getTemperature() <= 28;
    } else if ("Pepelnica".equals(diseaseName)) {
        return env.getHumidity() >= 60 && env.getHumidity() <= 80 && env.getTemperature() >= 20 && env.getTemperature() <= 25;
    }
    return false;
}

function boolean isRiskyCause(String diseaseName, EnvironmentalCondition env) {
    return isHighRiskEnvironment(diseaseName, env);
}
