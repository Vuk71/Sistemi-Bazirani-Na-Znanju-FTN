package forward;

import com.ftn.sbnz.model.models.Disease;
import com.ftn.sbnz.model.models.Symptom;
import com.ftn.sbnz.model.models.SymptomType;
import com.ftn.sbnz.model.models.EnvironmentalCondition;
import com.ftn.sbnz.model.models.Treatment;
import com.ftn.sbnz.model.models.TreatmentType;
import com.ftn.sbnz.model.models.Crop;
import com.ftn.sbnz.model.models.Phenophase;
import com.ftn.sbnz.model.models.DiagnosisResult;

// R01: Ako RH>85% i T∈[22,28]°C → rizik_plamenjače = visok
rule "R01 - Visok rizik plamenjače zbog uslova"
    when
        $env: EnvironmentalCondition(humidity > 85, temperature >= 22, temperature <= 28)
        $disease: Disease(name == "Plamenjača", probability < 30.0)
    then
        $disease.increaseProbability(30.0);
        System.out.println("R01: Detektovani kritični uslovi za plamenjaču - RH: " + $env.getHumidity() + "%, T: " + $env.getTemperature() + "°C");
        System.out.println("     Povećana verovatnoća plamenjače na: " + $disease.getProbability() + "%");
        update($disease);
end

// R02: Ako rizik_plamenjače=visok i vodenaste lezije → verovatnoća_plamenjače +=25%
rule "R02 - Plamenjača sa vodenastim lezijama"
    when
        $disease: Disease(name == "Plamenjača", probability >= 30.0, probability < 55.0)
        $symptom: Symptom(type == SymptomType.WATERY_LESIONS, present == true)
    then
        $disease.increaseProbability(25.0);
        System.out.println("R02: Detektovane vodenaste lezije uz visok rizik plamenjače");
        System.out.println("     Povećana verovatnoća plamenjače na: " + $disease.getProbability() + "%");
        update($disease);
end

// R04: Ako bele naslage i nema kondenzacije → pepelnica verovatna
rule "R04 - Pepelnica sa belim naslagama"
    when
        $symptom: Symptom(type == SymptomType.WHITE_DEPOSITS, present == true)
        $env: EnvironmentalCondition(humidity < 90)
        $disease: Disease(name == "Pepelnica", probability < 40.0)
    then
        $disease.increaseProbability(40.0);
        System.out.println("R04: Detektovane bele naslage bez kondenzacije - verovatna pepelnica");
        System.out.println("     Povećana verovatnoća pepelnice na: " + $disease.getProbability() + "%");
        update($disease);
end

// R04B: Ako pepelnica i žutilo → dodatni simptom
rule "R04B - Pepelnica sa žutilom"
    when
        $disease: Disease(name == "Pepelnica", probability >= 40.0, probability < 55.0)
        $symptom: Symptom(type == SymptomType.YELLOWING, present == true)
    then
        $disease.increaseProbability(15.0);
        System.out.println("R04B: Detektovano žutilo uz pepelnicu - dodatni simptom");
        System.out.println("     Povećana verovatnoća pepelnice na: " + $disease.getProbability() + "%");
        update($disease);
end

// R06: Ako siva prevlaka i RH>90% → siva trulež; uklanjanje + ventilacija
rule "R06 - Siva trulež sa sivom prevlakom"
    when
        $symptom: Symptom(type == SymptomType.GRAY_COATING, present == true)
        $env: EnvironmentalCondition(humidity > 90)
        $disease: Disease(name == "Siva trulež", probability < 50.0)
    then
        $disease.increaseProbability(50.0);
        System.out.println("R06: Detektovana siva prevlaka uz visoku vlažnost - siva trulež");
        System.out.println("     Povećana verovatnoća sive truleži na: " + $disease.getProbability() + "%");
        System.out.println("     PREPORUKA: Uklanjanje zaraženih delova + poboljšanje ventilacije");
        update($disease);
end

// R07: Ako uvenuće i posmeđenje žila → fuzarijum; proveri pH
rule "R07 - Fuzarijum sa uvenućem i posmeđenjem"
    when
        $symptom1: Symptom(type == SymptomType.WILTING, present == true)
        $symptom2: Symptom(type == SymptomType.BROWNING, present == true)
        $disease: Disease(name == "Fuzarijum", probability < 45.0)
    then
        $disease.increaseProbability(45.0);
        System.out.println("R07: Detektovano uvenuće i posmeđenje žila - fuzarijum");
        System.out.println("     Povećana verovatnoća fuzarijuma na: " + $disease.getProbability() + "%");
        System.out.println("     PREPORUKA: Proveriti pH zemljišta");
        update($disease);
end

// R09: Ako mozaik šare i nema gljivičnih prevlaka → virus mozaika
rule "R09 - Virus mozaika"
    when
        $symptom: Symptom(type == SymptomType.MOSAIC, present == true)
        not Symptom(type == SymptomType.GRAY_COATING, present == true)
        not Symptom(type == SymptomType.WHITE_DEPOSITS, present == true)
        $disease: Disease(name == "Virus mozaika", probability < 60.0)
    then
        $disease.increaseProbability(60.0);
        System.out.println("R09: Detektovane mozaik šare bez gljivičnih prevlaka - virus mozaika");
        System.out.println("     Povećana verovatnoća virusa mozaika na: " + $disease.getProbability() + "%");
        update($disease);
end

// R11: Ako navodnjavanje kasno uveče → rizik plamenjače +10% (samo jednom)
rule "R11 - Kasno navodnjavanje povećava rizik"
    when
        $env: EnvironmentalCondition(humidity > 80)
        $disease: Disease(name == "Plamenjača", probability < 90.0)
    then
        $disease.increaseProbability(10.0);
        System.out.println("R11: Visoka vlažnost povećava rizik plamenjače");
        System.out.println("     Povećana verovatnoća plamenjače na: " + $disease.getProbability() + "%");
        update($disease);
end

// R12: Ako RH>92% kontinuirano 2h → alarm „kritična zasićenost"
rule "R12 - Kritična zasićenost vlažnosti"
    when
        $env: EnvironmentalCondition(humidity > 92)
        $alert: RiskAlert(message == null || message == "")
    then
        $alert.setRiskLevel(RiskLevel.CRITICAL);
        $alert.setMessage("KRITIČNA ZASIĆENOST - RH > 92%");
        $alert.setRecommendation("HITNO: Maksimalna ventilacija, grejanje, smanjiti navodnjavanje");
        
        System.out.println("R12: KRITIČNI ALARM - Zasićenost vlažnosti!");
        System.out.println("     RH = " + $env.getHumidity() + "% (kritično > 92%)");
        System.out.println("     " + $alert.getRecommendation());
        
        update($alert);
end

// R13: Ako isti MOA ponovljen >3x → upozorenje na rezistenciju
rule "R13 - Upozorenje na rezistenciju"
    when
        $treatment: Treatment($moa: modeOfAction, modeOfAction != null)
        $applications: List(size > 3) from collect(
            TreatmentApplication(treatment.modeOfAction == $moa)
        )
        $alert: RiskAlert(message == null || message == "")
    then
        $alert.setRiskLevel(RiskLevel.MEDIUM);
        $alert.setMessage("UPOZORENJE: Isti MOA (" + $moa + ") korišćen > 3x");
        $alert.setRecommendation("Promeniti mehanizam delovanja, rotacija fungicida");
        
        System.out.println("R13: UPOZORENJE - Rizik rezistencije!");
        System.out.println("     MOA " + $moa + " korišćen " + $applications.size() + " puta");
        System.out.println("     " + $alert.getRecommendation());
        
        update($alert);
end

// R14: Ako karenca preparata > 7 dana → blokiraj preporuku za kratkoročnu berbu
rule "R14 - Blokiranje tretmana zbog karence"
    when
        $treatment: Treatment(withdrawalPeriod > 7, blocked == false)
        $crop: Crop(phenophase == Phenophase.FRUITING)
    then
        System.out.println("R14: BLOKIRAN TRETMAN - Karenca duža od 7 dana u fazi plodonošenja!");
        System.out.println("     Tretman: " + $treatment.getName());
        System.out.println("     Karenca: " + $treatment.getWithdrawalPeriod() + " dana");
        System.out.println("     PREPORUKA: Koristiti tretman bez karence");
        
        $treatment.setBlocked(true);
        $treatment.setBlockReason("Karenca (" + $treatment.getWithdrawalPeriod() + "d) > 7d u plodonošenju");
        update($treatment);
end

// R15: Ako više bolesti verovatne → izračunaj skor po Bayes priorima
rule "R15 - Bayes analiza za više bolesti"
    when
        $diseases: List(size > 1) from collect(
            Disease(probability >= 30.0)
        )
        $result: DiagnosisResult()
    then
        System.out.println("R15: Detektovano više verovatnih bolesti - Bayes analiza");
        
        double totalProbability = 0.0;
        for (Object obj : $diseases) {
            Disease disease = (Disease) obj;
            totalProbability += disease.getProbability();
        }
        
        // Normalizacija verovatnoća
        for (Object obj : $diseases) {
            Disease disease = (Disease) obj;
            double normalizedProb = (disease.getProbability() / totalProbability) * 100.0;
            disease.setProbability(normalizedProb);
            
            System.out.println("     " + disease.getName() + ": " + 
                String.format("%.1f", normalizedProb) + "% (normalizovano)");
        }
        
        $result.setProbableDiseases($diseases);
        update($result);
end